// <auto-generated />
using System;
using Aujourdhui.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Aujourdhui.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201211104723_Refactoring_Securable")]
    partial class Refactoring_Securable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Aujourdhui.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "953049a0-6d8e-47e8-8ffe-6b0fb7ce0851",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "141e6369-931f-47f5-a80e-e6763ef3cbc5",
                            Email = "nikita.dermenzhi@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            Guid = new Guid("97923f0c-02c2-4b05-8dde-4abdeab339a8"),
                            LastName = "Dermenzhi",
                            LockoutEnabled = false,
                            MiddleName = "A.",
                            NormalizedEmail = "NIKITA.DERMENZHI@GMAIL.COM",
                            NormalizedUserName = "MASTER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKwbP/Yqsn15/KK2CkUjvqW6N6rYjDeynkFUtya+K7Si5pzQBVlI150fVy4225PKvw==",
                            PhoneNumber = "+380687379427",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "80846e7e-ac21-485a-9bc9-426c7007b205",
                            TwoFactorEnabled = false,
                            UserName = "master"
                        });
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.FileReference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.ToTable("FileReferences");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Firm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Content", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("Language");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Key", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Default")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Table")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.LanguageKey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<int>("KeyID")
                        .HasColumnType("integer");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("KeyID");

                    b.HasIndex("Language");

                    b.ToTable("LanguageKeys");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.LanguageValue", b =>
                {
                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Language");

                    b.HasAlternateKey("Guid");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Language = 0,
                            Code = "en",
                            Guid = new Guid("d6c05bb7-a827-4264-a6cb-9746b01f492f"),
                            Name = "English"
                        },
                        new
                        {
                            Language = 1,
                            Code = "ru",
                            Guid = new Guid("24b36a41-0b64-4561-b4bf-c8543488ab4a"),
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Translation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ContentID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("ContentID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("Language");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentID")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("ParentID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Option", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.PricePolicy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SpecificationID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("SpecificationID");

                    b.ToTable("PricePolicies");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FirmID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ReleasedRecipeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FirmID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("ReleasedRecipeID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Property", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Specification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("ProductID");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.SpecificationOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OptionID")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecificationID")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("OptionID");

                    b.HasIndex("SpecificationID");

                    b.ToTable("SpecificationOptions");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("EstimatedPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Alcohol")
                        .HasColumnType("double precision");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("integer");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("EstimatedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RecipeDifficultyLevel")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("GroupID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("RecipeDifficultyLevel");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeDifficultyLevelValue", b =>
                {
                    b.Property<int>("RecipeDifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RecipeDifficultyLevel");

                    b.HasAlternateKey("Guid");

                    b.ToTable("RecipeDifficultyLevels");

                    b.HasData(
                        new
                        {
                            RecipeDifficultyLevel = 0,
                            Description = "No knowledge at all of the topic",
                            Guid = new Guid("b4e85296-5d35-4e87-9da0-e4e810077bb8"),
                            Name = "Beginner"
                        },
                        new
                        {
                            RecipeDifficultyLevel = 1,
                            Description = "A very basic knowledge of the topic but no professional usage",
                            Guid = new Guid("8ed302bc-057a-48a2-a168-6b7f72b8c9d7"),
                            Name = "Basic"
                        },
                        new
                        {
                            RecipeDifficultyLevel = 2,
                            Description = "A basic knowledge of the topic but no regular professional usage",
                            Guid = new Guid("51556e81-cd51-4261-b703-423256e15d05"),
                            Name = "Intermediate"
                        },
                        new
                        {
                            RecipeDifficultyLevel = 3,
                            Description = "A good knowledge of the topic and a regular professional usage",
                            Guid = new Guid("81800190-482c-4e89-8a12-ec11618e113e"),
                            Name = "Advanced"
                        },
                        new
                        {
                            RecipeDifficultyLevel = 4,
                            Description = "A perfect knowledge of the topic and a daily professional usage",
                            Guid = new Guid("d61c6921-87cc-47cd-a8f1-c7e28e796913"),
                            Name = "Expert"
                        });
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecipeID")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeItemType")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("RecipeID");

                    b.HasIndex("RecipeItemType");

                    b.ToTable("RecipeItems");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItemIngredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<int?>("IngredientID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecipeItemID")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("IngredientID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("RecipeItemID");

                    b.ToTable("RecipeItemIngredients");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItemTypeValue", b =>
                {
                    b.Property<int>("RecipeItemType")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RecipeItemType");

                    b.HasAlternateKey("Guid");

                    b.ToTable("RecipeItemTypes");

                    b.HasData(
                        new
                        {
                            RecipeItemType = 0,
                            Guid = new Guid("b850850b-c09e-4b08-80fc-0a3b3e62edcf"),
                            Name = "Paragraph"
                        },
                        new
                        {
                            RecipeItemType = 1,
                            Guid = new Guid("9a4c35e8-4e00-4c93-ab53-b4178514cbb7"),
                            Name = "Header"
                        },
                        new
                        {
                            RecipeItemType = 2,
                            Guid = new Guid("fe011dd6-00a7-45ab-b91d-8dc30327b670"),
                            Name = "Image"
                        });
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.ReleasedRecipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecipeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Released")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("RecipeID");

                    b.ToTable("ReleasedRecipes");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Commodity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Alcohol")
                        .HasColumnType("double precision");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("integer");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<int?>("FirmID")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("FirmID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.CommodityLink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommodityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CommodityID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.ToTable("CommodityLinks");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.PortionTypeValue", b =>
                {
                    b.Property<int>("PortionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PortionType");

                    b.HasAlternateKey("Guid");

                    b.ToTable("PortionTypes");

                    b.HasData(
                        new
                        {
                            PortionType = 0,
                            Guid = new Guid("6dc12895-511c-4dae-9dd2-c4ad38a053b9"),
                            Name = "Pieces",
                            Units = "pcs."
                        },
                        new
                        {
                            PortionType = 1,
                            Guid = new Guid("86de84e4-629b-4b8b-8442-a0feef48b201"),
                            Name = "Volumetric",
                            Units = "ml."
                        },
                        new
                        {
                            PortionType = 2,
                            Guid = new Guid("36ada2d4-a683-49ff-96d0-fe55474815a7"),
                            Name = "Weight",
                            Units = "g."
                        });
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommodityID")
                        .HasColumnType("integer");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateProduced")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Portion")
                        .HasColumnType("double precision");

                    b.Property<int>("PortionType")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CommodityID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("PortionType");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.PurchaseConsumption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<double>("Consumption")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PurchaseID")
                        .HasColumnType("integer");

                    b.Property<int?>("ReleasedRecipeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ModifiedByUserID");

                    b.HasIndex("PurchaseID");

                    b.HasIndex("ReleasedRecipeID");

                    b.ToTable("PurchaseConsumptions");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesID")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsID")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesID", "ProductsID");

                    b.HasIndex("ProductsID");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("CommodityIngredient", b =>
                {
                    b.Property<int>("CommoditiesID")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientsID")
                        .HasColumnType("integer");

                    b.HasKey("CommoditiesID", "IngredientsID");

                    b.HasIndex("IngredientsID");

                    b.ToTable("CommodityIngredient");
                });

            modelBuilder.Entity("CountryLanguageValue", b =>
                {
                    b.Property<int>("CountriesID")
                        .HasColumnType("integer");

                    b.Property<int>("LanguagesLanguage")
                        .HasColumnType("integer");

                    b.HasKey("CountriesID", "LanguagesLanguage");

                    b.HasIndex("LanguagesLanguage");

                    b.ToTable("CountryLanguageValue");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<int>("IngredientsID")
                        .HasColumnType("integer");

                    b.Property<int>("RecipesID")
                        .HasColumnType("integer");

                    b.HasKey("IngredientsID", "RecipesID");

                    b.HasIndex("RecipesID");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            ConcurrencyStamp = "1dcf16e2-ac56-48a3-a8c2-bb3945f469ce",
                            Name = "Master",
                            NormalizedName = "MASTER"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "e8d15aa5-7685-4e27-b62d-5a2a91f285c7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "229a01b1-42c1-48aa-92f4-dccb670ce60d",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "968139af-1b73-44f9-982a-ead2190e6958",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "953049a0-6d8e-47e8-8ffe-6b0fb7ce0851",
                            RoleId = "0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProductProperty", b =>
                {
                    b.Property<int>("ProductsID")
                        .HasColumnType("integer");

                    b.Property<int>("PropertiesID")
                        .HasColumnType("integer");

                    b.HasKey("ProductsID", "PropertiesID");

                    b.HasIndex("PropertiesID");

                    b.ToTable("ProductProperty");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Firm", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Content", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Languages.LanguageValue", "LanguageValue")
                        .WithMany()
                        .HasForeignKey("Language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LanguageValue");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.LanguageKey", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Languages.Key", "Key")
                        .WithMany("LanguageKeys")
                        .HasForeignKey("KeyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Languages.LanguageValue", "LanguageValue")
                        .WithMany("LanguageKeys")
                        .HasForeignKey("Language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Key");

                    b.Navigation("LanguageValue");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Translation", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Languages.Content", "Content")
                        .WithMany("Translations")
                        .HasForeignKey("ContentID");

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Languages.LanguageValue", "LanguageValue")
                        .WithMany("Translations")
                        .HasForeignKey("Language")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("CreatedBy");

                    b.Navigation("LanguageValue");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Category", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Products.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Option", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.PricePolicy", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Products.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Product", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Firm", "Firm")
                        .WithMany("Products")
                        .HasForeignKey("FirmID");

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.ReleasedRecipe", "ReleasedRecipe")
                        .WithMany()
                        .HasForeignKey("ReleasedRecipeID");

                    b.Navigation("CreatedBy");

                    b.Navigation("Firm");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReleasedRecipe");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Property", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Specification", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.SpecificationOption", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Products.Option", "Option")
                        .WithMany("SpecificationOptions")
                        .HasForeignKey("OptionID");

                    b.HasOne("Aujourdhui.Data.Models.Products.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationID");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Option");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Group", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Ingredient", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Recipe", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.RecipeDifficultyLevelValue", "RecipeDifficultyLevelValue")
                        .WithMany()
                        .HasForeignKey("RecipeDifficultyLevel");

                    b.Navigation("CreatedBy");

                    b.Navigation("Group");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RecipeDifficultyLevelValue");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItem", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Recipe", "Recipe")
                        .WithMany("RecipeItems")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.RecipeItemTypeValue", "RecipeItemTypeValue")
                        .WithMany()
                        .HasForeignKey("RecipeItemType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeItemTypeValue");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItemIngredient", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID");

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.RecipeItem", "RecipeItem")
                        .WithMany("Ingredient")
                        .HasForeignKey("RecipeItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Ingredient");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RecipeItem");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.ReleasedRecipe", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Commodity", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Firm", "Firm")
                        .WithMany("Commodities")
                        .HasForeignKey("FirmID");

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Firm");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.CommodityLink", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Storage.Commodity", "Commodity")
                        .WithMany("CommodityLinks")
                        .HasForeignKey("CommodityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Purchase", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Storage.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Storage.PortionTypeValue", "PortionTypeValue")
                        .WithMany()
                        .HasForeignKey("PortionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PortionTypeValue");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.PurchaseConsumption", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Storage.Purchase", "Purchase")
                        .WithMany("PurchaseConsumptions")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.ReleasedRecipe", "ReleasedRecipe")
                        .WithMany("PurchaseConsumptions")
                        .HasForeignKey("ReleasedRecipeID");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Purchase");

                    b.Navigation("ReleasedRecipe");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Products.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommodityIngredient", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Storage.Commodity", null)
                        .WithMany()
                        .HasForeignKey("CommoditiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryLanguageValue", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Languages.LanguageValue", null)
                        .WithMany()
                        .HasForeignKey("LanguagesLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Recipes.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Recipes.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProperty", b =>
                {
                    b.HasOne("Aujourdhui.Data.Models.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aujourdhui.Data.Models.Products.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Firm", b =>
                {
                    b.Navigation("Commodities");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Content", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.Key", b =>
                {
                    b.Navigation("LanguageKeys");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Languages.LanguageValue", b =>
                {
                    b.Navigation("LanguageKeys");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Products.Option", b =>
                {
                    b.Navigation("SpecificationOptions");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.Recipe", b =>
                {
                    b.Navigation("RecipeItems");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.RecipeItem", b =>
                {
                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Recipes.ReleasedRecipe", b =>
                {
                    b.Navigation("PurchaseConsumptions");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Commodity", b =>
                {
                    b.Navigation("CommodityLinks");
                });

            modelBuilder.Entity("Aujourdhui.Data.Models.Storage.Purchase", b =>
                {
                    b.Navigation("PurchaseConsumptions");
                });
#pragma warning restore 612, 618
        }
    }
}
